In This project We are going to analyze the pizza sales from various aspects
the data we are going to use in this project are divided in to 4 table in CSV format
      1.order Details
      2.order
      3.pizza_types
      4.pizzas
    ---------------------*********************                           Table Creation Queries                   *******************************-------------------------------


    drop table if exists pizzas;
create table if not exists pizzas(pizza_id varchar(30), pizza_type_id varchar(30), size varchar(5), price double precision);

drop table if exists pizza_types;
create table if not exists pizzas_types(pizza_type_id varchar(20), name varchar(50), category varchar(15), ingredients varchar(100));

drop table if exists orders;
create table if not exists orders(order_id int primary key, date date, time time);

drop table if exists order_details;
create table if not exists order_details(order_details_id int, order_id int, pizza_id varchar(20), quantit int);


  ---------------------*********************                           Data Analysis Queries                   *******************************-------------------------------


select * from orders;
select * from order_details;
select * from pizzas;
select * from pizzas_types;

--------**        Data Analysis Queries          **-------

--------**        Section:1 Basic Queries          **-------


--1.Retrieve the total number of orders placed.

select count(distinct order_id) total_orders from orders;

--2.Calculate the total revenue generated from pizza sales (Important Query to see).

select round(sum(order_details.quantity * pizzas.price)::int,2) total_revenue
from order_details join pizzas
on pizzas.pizza_id = order_details.pizza_id

--3.Identify the highest-priced pizza.

-- my answer--
select max(price) highest_price, pizza_id from pizzas
group by pizza_id
order by highest_price desc
limit 1

-- Tutorial Solution--

select pizzas_types.name, pizzas.price
from pizzas_types join pizzas
on pizzas_types.pizza_type_id = pizzas.pizza_type_id
order by pizzas.price desc
limit 1

--4.Identify the most common pizza size ordered.

select pizzas.size, count(order_details.order_details_id) cnt
from pizzas join order_details
on pizzas.pizza_id = order_details.pizza_id
group by pizzas.size
order by cnt desc

--5.List the top 5 most ordered pizza types along with their quantities.

select * from orders;
select * from order_details;--qty
select * from pizzas;
select * from pizzas_types;--pizza name, common pizza_type_id with pizza table

select pizzas_types.name, sum(order_details.quantity) total_odr
from pizzas_types join pizzas -- here two tables has one common column
on pizzas_types.pizza_type_id = pizzas.pizza_type_id -- in this line name of common column mentioned
join order_details     -- it's second join to fetch quantity
on order_details.pizza_id = pizzas.pizza_id
group by pizzas_types.name
order by total_odr desc
limit 5

--------**        Section:2 Intermediate Queries          **-------

select * from orders;
select * from order_details;
select * from pizzas;
select * from pizzas_types;

--6.Join the necessary tables to find the total quantity of each pizza category ordered.

select pizzas_types.category, sum(order_details.quantity) ctgy_ttl from pizzas_types
join pizzas on pizzas_types.pizza_type_id = pizzas.pizza_type_id
join order_details on pizzas.pizza_id = order_details.pizza_id
group by pizzas_types.category
order by ctgy_ttl desc

--7.Determine the distribution of orders by hour of the day. (hourly count of orders)

select extract(hour from time)::integer as hour, count(order_id) cnt from orders
group by hour
order by cnt desc

--8.Join relevant tables to find the category-wise distribution of pizzas.

select category, count(name) from pizzas_types
group by category;

--9.Group the orders by date and calculate the average number of pizzas ordered per day (very important).


-- my solution however it's not connect  as i thought that we have to group the avg of each day by date

-- answer appeared after giving the column name in sum

select round(avg(qty),0) avg_order_pizza_per_day from (
select orders.date, sum(order_details.quantity) qty from orders
join order_details on orders.order_id = order_details.order_id
group by orders.date) as avg_qty

--10.Determine the top 3 most ordered pizza types based on revenue

select pizzas_types.name,sum(pizzas.price * order_details.quantity) as revenue from pizzas
join order_details
on pizzas.pizza_id = order_details.pizza_id
join pizzas_types
on pizzas.pizza_type_id = pizzas_types.pizza_type_id
group by pizzas_types.name
order by revenue desc
limit 3

--------**        Section:3 Advance Queries          **-------

select * from orders;
select * from order_details;
select * from pizzas;
select * from pizzas_types;

--11.Calculate the percentage contribution of each pizza type to total revenue (we will do it by category) (very important)

select pizzas_types.category, 
(sum(pizzas.price * order_details.quantity)) / (select sum(pizzas.price * order_details.quantity) from pizzas
join order_details on pizzas.pizza_id = order_details.pizza_id) * 100 as contribution from pizzas
join order_details
on pizzas.pizza_id = order_details.pizza_id
join pizzas_types
on pizzas.pizza_type_id = pizzas_types.pizza_type_id
group by pizzas_types.category

-- below query wrote externally to calculate percentage after writing pasted in above query
select sum(pizzas.price * order_details.quantity) from pizzas
join order_details on pizzas.pizza_id = order_details.pizza_id

--12.Analyze the cumulative revenue generated over time. (Very Very Important)

select order_date, sum(revenue) over(order by order_date) as cumulative_revenue from
(select orders.date as order_date, sum(order_details.quantity * pizzas.price) as revenue from  orders
join order_details
on orders.order_id = order_details.order_id
join pizzas
on order_details.pizza_id = pizzas.pizza_id
group by orders.date) as sales;
-- We have to give "columns names" in this query as we give in subquery like "order_date" to solve this query
-- and table name as we give "sales" in last
